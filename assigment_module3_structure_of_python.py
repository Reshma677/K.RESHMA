# -*- coding: utf-8 -*-
"""assigment module3 structure of python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gv66ADAVFwuH0x_N0vqzvyzoCROFz-Gq

1." Write code to reverse string?
"""

txt = "Hello World"[::-1]
print(txt)

"""2. Write code to count the number of vowels in strings?"""

string = "GeekforGeeks!"
vowels = "aeiouAEIOU"

count = sum(string.count(vowel) for vowel in vowels)
print(count)
# Python3 code to count vowel in
# a string using set

# Function to count vowel
def vowel_count(str):

    # Initializing count variable to 0
    count = 0

    # Creating a set of vowels
    vowel = set("aeiouAEIOU")

    # Loop to traverse the alphabet
    # in the given string
    for alphabet in str:

        # If alphabet is present
        # in set vowel
        if alphabet in vowel:
            count = count + 1

    print("No. of vowels :", count)

"""3. Write code to check if  given string is a  palindrone or not?"""

# function which return reverse of a string

def isPalindrome(s):
    return s == s[::-1]


# Driver code
s = "malayalam"
ans = isPalindrome(s)

if ans:
    print("Yes")
else:
    print("No")

"""4. Write code to check if two given strings are anagrams of each other?"""

# function to check if two strings are
# anagram or not
def check(s1, s2):

    # the sorted strings are checked
    if(sorted(s1)== sorted(s2)):
        print("The strings are anagrams.")
    else:
        print("The strings aren't anagrams.")

# driver code
s1 ="listen"
s2 ="silent"
check(s1, s2)

"""5. Write code to find all occurrences of a given substring within another string?"""

test_str = "GeeksforGeeks is best for Geeks"

# initializing substring
test_sub = "Geeks"

# printing original string
print("The original string is : " + test_str)

# printing substring
print("The substring to find : " + test_sub)

# using list comprehension + startswith()
# All occurrences of substring in string
res = [i for i in range(len(test_str)) if test_str.startswith(test_sub, i)]

# printing result
print("The start indices of the substrings are : " + str(res))

"""6. Write code to perform basic string for compression using the counts of repeated character?"""

def compression(string):
    hash = {}
    list = []
    count = 0
    for i in range(len(string) - 1):
        if string[i - 1] != string[i] or i == 0:
            if string[i] != string[i + 1] or i == len(string) - 2:
                count = count + 1
                list.append(str(string[i]))
                list.append(str(count))
                count = 0
            elif string[i] == string[i + 1]:
                count = count + 1
        elif string[i - 1] == string[i]:
            if string[i] != string[i + 1] or i == len(string) - 2:
                count = count + 1
                list.append(str(string[i]))
                list.append(str(count))
                count = 0
            if string[i] == string[i + 1]:
                count = count + 1
        print(list)
    result =  "".join(list)
    if len(result) == len(string):
        return string
    else:
        return result
string = "abcccfffgggg"
compression(string)

"""7. Write code to determine if string has allll unique characters?"""

def isUniqueChars(st):

    # String length cannot be more than
    # 256.
    if len(st) > 256:
        return False

    # Initialize occurrences of all characters
    char_set = [False] * 128

    # For every character, check if it exists
    # in char_set
    for i in range(0, len(st)):

        # Find ASCII value and check if it
        # exists in set.
        val = ord(st[i])
        if char_set[val]:
            return False

        char_set[val] = True

    return True

# driver code
st = "abcd"
.print(isUniqueChars(st))

"""8. Write code to convert  a given string to uppercase or lowercase?"""

string = 'GEEKSFORGEEKS' # Define a string containing only uppercase letters
print(string.isupper())  # Check if all characters in the string are uppercase and print the result

string = 'GeeksforGeeks'# Define a string with a mix of uppercase and lowercase letters
print(string.isupper()) # Check if all characters in the string are uppercase and print the result

"""9.Write code to count the number of words in a string?"""

# Quick Two Line Codes
countOfWords = len("Geeksforgeeks is best Computer Science Portal".split())
print("Count of Words in the given Sentence:", countOfWords)

# Quick One Line Codes
print(len("Geeksforgeeks is best Computer Science Portal".split()))

# Quick One Line Code with User Input
print(len(input("Enter Input:").split()))

# Python3 code to demonstrate
# to count words in string
# using split()

# initializing string
test_string = "Geeksforgeeks is best Computer Science Portal"

# printing original string
print ("The original string is : " + test_string)

# using split()
# to count words in string
res = len(test_string.split())

# printing result
print ("The number of words in string are : " + str(res))

"""10.Write code to concatenate two strings without using the + operator?"""

# Defining strings
var1 = "Hello "
var2 = "Geek"

# + Operator is used to combine strings
var3 = var1 + var2
print(var3)

var1 = "Geeks"
var2 = "forGeeks"

# join() method is used to combine the strings
print("".join([var1, var2]))

# join() method is used here to combine
# the string with a separator Space(" ")
var3 = " ".join([var1, var2])

print(var3)

"""11.Write code to remove all occurrence of a specific element from the list?"""

def remove_items(test_list, item):

    # using list comprehension to perform the task
    res = [i for i in test_list if i != item]
    return res

# driver code
if __name__ == "__main__":
    test_list = [1, 3, 4, 6, 5, 1]
    # the item which is to be removed
    item = 1
    print("The original list is : " + str(test_list))

    # calling the function remove_items()
    res = remove_items(test_list, item)

    # printing result
    print("The list after performing the remove operation is : " + str(res))

"""12.Implement a code to find the second largest number in given list of integers?"""

# Python program to find second largest
# number in a list

# list of numbers - length of
# list should be at least 2
list1 = [10, 20, 4, 45, 99]

mx = max(list1[0], list1[1])
secondmax = min(list1[0], list1[1])
n = len(list1)
for i in range(2,n):
    if list1[i] > mx:
        secondmax = mx
        mx = list1[i]
    elif list1[i] > secondmax and \
        mx != list1[i]:
        secondmax = list1[i]
    elif mx == secondmax and \
        secondmax != list1[i]:
          secondmax = list1[i]

print("Second highest number is : ",\
      str(secondmax))

"""13.Create code to count the occurrences of each element in a list and return ' dictionary with elements as
keys and their count as values?

"""

# Python code to count the number of occurrences
def countX(lst, x):
    count = 0
    for ele in lst:
        if (ele == x):
            count = count + 1
    return count


# Driver Code
lst = [8, 6, 8, 10, 8, 20, 10, 8, 8]
x = 8
print('{} has occurred {} times'.format(x,
                                        countX(lst, x)))

"""14.Write a code to reverse a list  in -place without using any
 built-in reverse functions?

Reverse List Using Slicing Technique
"""

# Reversing a list using slicing technique
def Reverse(lst):
   new_lst = lst[::-1]
   return new_lst


lst = [10, 11, 12, 13, 14, 15]
print(Reverse(lst))

"""Reverse List by Swapping Present and Last Numbers at a Time"""

# Python program to reverse an array
def list_reverse(arr, size):
    i = 0
    while i < size // 2:
        # swap elements from the start with elements from the end iteratively
        arr[i], arr[size - i - 1] = arr[size - i - 1], arr[i]
        i += 1
    return arr


arr = [1, 2, 3, 4, 5]
size = 5
print('Original list: ', arr)
print("Reversed list: ", list_reverse(arr, size))

# This contributed by Sushrut Thakur

"""15.Implement a code to find and remove duplicates from a list while preserving the original order of elements?

16.Create a code to check if a given list is sorted (either in ascending or descending order) or not?
"""

# Python3 code to demonstrate
# to check if list is sorted
# using naive method

# initializing list
test_list = [1, 4, 5, 8, 10]

# printing original list
print ("Original list : " + str(test_list))

# using naive method to
# check sorted list
flag = 0
i = 1
while i < len(test_list):
    if(test_list[i] < test_list[i - 1]):
        flag = 1
    i += 1

# printing result
if (not flag) :
    print ("Yes, List is sorted.")
else :
    print ("No, List is not sorted.")

# Python3 code to demonstrate
# to check if list is sorted
# using sort()

# initializing list
test_list = [10, 4, 5, 8, 10]

# printing original list
print ("Original list : " + str(test_list))

# using sort() to
# check sorted list
flag = 0
test_list1 = test_list[:]
test_list1.sort()
if (test_list1 == test_list):
    flag = 1

# printing result
if (flag) :
    print ("Yes, List is sorted.")
else :
    print ("No, List is not sorted.")

"""17. Write a code to merge two sorted lists into single sorted list."""

# Python3 code to demonstrate
# to combine two sorted list
# using naive method

# initializing lists
test_list1 = [1, 5, 6, 9, 11]
test_list2 = [3, 4, 7, 8, 10]

# printing original lists
print("The original list 1 is : " + str(test_list1))
print("The original list 2 is : " + str(test_list2))

# using naive method
# to combine two sorted lists
size_1 = len(test_list1)
size_2 = len(test_list2)

res = []
i, j = 0, 0

while i < size_1 and j < size_2:
    if test_list1[i] < test_list2[j]:
        res.append(test_list1[i])
        i += 1

    else:
        res.append(test_list2[j])
        j += 1

res = res + test_list1[i:] + test_list2[j:]

# printing result
print("The combined sorted list is : " + str(res))

"""18. Implement a code to find the intersection of two given lists."""

# Python program to illustrate the intersection
# of two lists in most simple way
def intersection(lst1, lst2):
    lst3 = [value for value in lst1 if value in lst2]
    return lst3

# Driver Code
lst1 = [4, 9, 1, 17, 11, 26, 28, 54, 69]
lst2 = [9, 9, 74, 21, 45, 11, 63, 28, 26]
print(intersection(lst1, lst2))

"""19.Create a code to find the union of two lists without duplicates?"""

list1 = [23, 45, 65, 31, 1, 89]
list2 = [67, 89, 23, 45, 8, 90]

# Converting the list into set
set1 = set(list1)
set2 = set(list2)

# find the union of the sets and converting resultant set to list
ans = list(set1.union(set2))

print("The resultant merged list is ")
print(ans)

"""20.Write a code to shuffle ' given list randomly without using any built-in shuffle functions?"""

import random

my_list = [1, 2, 3, 4, 5]

shuffled_list = sorted(my_list, key=lambda x: random.random())

print("Original list:", my_list)
print("Shuffled list:", shuffled_list)

"""21.Write a code that takes two tuples as input and returns' new tuple containing elements  that are common to both input tuples."""

# Python3 code to demonstrate working of
# All pair combinations of 2 tuples
# Using list comprehension

# initializing tuples
test_tuple1 = (4, 5)
test_tuple2 = (7, 8)

# printing original tuples
print("The original tuple 1 : " + str(test_tuple1))
print("The original tuple 2 : " + str(test_tuple2))

# All pair combinations of 2 tuples
# Using list comprehension
res =  [(a, b) for a in test_tuple1 for b in test_tuple2]
res = res +  [(a, b) for a in test_tuple2 for b in test_tuple1]

# printing result
print("The filtered tuple : " + str(res))

"""22.Create a code that prompts the user to enter two sets of integers separated by commas. Then, print the
intersection of these two sets?
"""

s1 = {1, 2, 3}
s2 = {2, 3}
print(s1.intersection(s2))

"""23.Write a code to concatenate two tuples. The function should take two tuples as input and return new tuple containing elements from both input tuples."""

# Python3 code to demonstrate working of
# Ways to concatenate tuples
# using + operator

# initialize tuples
test_tup1 = (1, 3, 5)
test_tup2 = (4, 6)

# printing original tuples
print("The original tuple 1 : " + str(test_tup1))
print("The original tuple 2 : " + str(test_tup2))

# Ways to concatenate tuples
# using + operator
res = test_tup1 + test_tup2

# printing result
print("The tuple after concatenation is : " + str(res))

"""24.Develop a code that prompts the user to input two sets of strings. Then print the elements that from present in the first set but not in the second sets."""

# string 1
a = "geeksforgeeks"

# string 2
b = "geeks"

# convert string 1 into set
setA = set(a)

# convert string 2 into set
setB = set(b)

# store the difference in form of list
result = setA-setB

# print result
print(result)

"""25.Creat a code that takes a tuples and two integers as input. The function should return a  new tuple containing elements from the original tuple within the specified range of indices."""

# Python program to create a list of tuples
# from given list having number and
# its cube in each tuple

# creating a list
list1 = [1, 2, 5, 6]

# using list comprehension to iterate each
# values in list and create a tuple as specified
res = [(val, pow(val, 3)) for val in list1]

# print the result
print(res)

"""26.Write  a code that prompts the user to input two sets of characters. Then print the union of these two sets?"""

A = {2, 4, 5, 6}
B = {4, 6, 7, 8}

print("A U B:", A.union(B))

"""27. Develop a code that takes a tuple of integers as input. The function should return the maximum and minimum values from the tuple using tuple unpacking?

"""

# Program to understand about
# packing and unpacking in Python

# this lines PACKS values
# into variable a
a = ("MNNIT Allahabad", 5000, "Engineering")

# this lines UNPACKS values
# of variable a
(college, student, type_ofcollege) = a

# print college name
print(college)

# print no of student
print(student)

# print type of college
print(type_ofcollege)

"""28.Create a code that defines two sets of integers. Than print the union intersection and difference of these
two sets?
"""

# Program to perform different set operations
# as we do in  mathematics

# sets are define
A = {0, 2, 4, 6, 8};
B = {1, 2, 3, 4, 5};

# union
print("Union :", A | B)

# intersection
print("Intersection :", A & B)

# difference
print("Difference :", A - B)

# symmetric difference
print("Symmetric difference :", A ^ B)

"""29.Write a code that takes a tuples and an element as input. The function should return the count of occurrances of the given elements in the tuple."""

# Program to count the number of times an element
# Present in the list


def countX(tup, x):
    count = 0
    for ele in tup:
        if (ele == x):
            count = count + 1
    return count


# Driver Code
tup = (10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)
enq = 4
enq1 = 10
enq2 = 8

print(countX(tup, enq))
print(countX(tup, enq1))
print(countX(tup, enq2))

"""30.Develop a code that prompts the user to input two sets of strings. Then print the symmetric difference of these two sets.

"""

set_A = {1, 2, 3, 4, 5}
set_B = {6, 7, 3, 9, 4}
print(set_A.symmetric_difference(set_B))

set1 = {1, 2, 3}
set2 = {3, 4, 5}

result = set1.symmetric_difference(set2)
print(result)

"""31.Write a code that takes a list of words as input and returns a dictionary where the keys are unique words and the values are the freqeuencies of those words in the input list."""

def CountFrequency(my_list):

    # Creating an empty dictionary
    freq = {}
    for item in my_list:
        if (item in freq):
            freq[item] += 1
        else:
            freq[item] = 1

    for key, value in freq.items():
        print("% d : % d" % (key, value))


# Driver function
if __name__ == "__main__":
    my_list = [1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2]

    CountFrequency(my_list)

"""32.Write a code that takes two dictionaries as input and merges them into a single dictionary. If there are
common keys, the values should be added together?
"""

# Python program to combine two dictionary
# adding values for common keys
# initializing two dictionaries
dict1 = {'a': 12, 'for': 25, 'c': 9}
dict2 = {'Geeks': 100, 'geek': 200, 'for': 300}


# adding the values with common key
for key in dict2:
    if key in dict1:
        dict2[key] = dict2[key]+ dict1[key]
    else:
        pass

print(dict2)

"""33. Write  a code to access the value in a nested dictionary. The function should take the dictionary and a list of
keys as input and return the corresponding value. If any of the keys do not exist in the dictionary the function should return None.
"""

# Python3 code to demonstrate working of
# Safe access nested dictionary key
# Using nested get()

# initializing dictionary
test_dict = {'Gfg' : {'is' : 'best'}}

# printing original dictionary
print("The original dictionary is : " + str(test_dict))

# using nested get()
# Safe access nested dictionary key
res = test_dict.get('Gfg', {}).get('is')

# printing result
print("The nested safely accessed value is :  " + str(res))

"""34.Write a code that takes a dictionary as input and returns a sorted version of it based on the values. You can choose whether to sort in ascending or descending order."""

# Python3 code to demonstrate working of
# Sort a Dictionary
# Sort by Keys

# initializing dictionary
test_dict = {"Gfg" : 5, "is" : 7, "Best" : 2, "for" : 9, "geeks" : 8}

# printing original dictionary
print("The original dictionary is : " + str(test_dict))

# using items() to get all items
# lambda function is passed in key to perform sort by key
res = {key: val for key, val in sorted(test_dict.items(), key = lambda ele: ele[0])}

# printing result
print("Result dictionary sorted by keys : " + str(res))

# using items() to get all items
# lambda function is passed in key to perform sort by key
# adding "reversed = True" for reversed order
res = {key: val for key, val in sorted(test_dict.items(), key = lambda ele: ele[0], reverse = True)}

# printing result
print("Result dictionary sorted by keys ( in reversed order ) : " + str(res))

"""35.Write a code that inverts a dictionary swapping keys and values. Ensure that the inverted dictionary correctly handles cases where multiple keys have the same value by storing the keys as a list in the
inverted dictionary.
"""

# Python3 code to demonstrate
# swap of key and value

# initializing dictionary
old_dict = {'A': 67, 'B': 23, 'C': 45, 'D': 56, 'E': 12, 'F': 69, 'G': 67, 'H': 23}

new_dict = dict([(value, key) for key, value in old_dict.items()])

# Printing original dictionary
print ("Original dictionary is : ")
print(old_dict)

print()

# Printing new dictionary after swapping keys and values
print ("Dictionary after swapping is :  ")
print("keys: values")
for i in new_dict:
    print(i, " :  ", new_dict[i])